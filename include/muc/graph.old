// -*- C++ -*-
//
// Copyright 2024  Shihan Zhao
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include <algorithm>
#include <cassert>
#include <cstddef>
#include <cstdint>
#include <forward_list>
#include <iterator>
#include <memory>
#include <memory_resource>
#include <optional>
#include <stdexcept>
#include <type_traits>
#include <unordered_map>
#include <utility>

namespace Smooth {

/// @brief Tag type indicates the graph is unweighted.
struct Unweighted {};

/// @brief A finite, simple, undirected, weighted/unweighted graph.
/// @tparam T value type on vertex
/// @tparam W weight type on edge
template<typename T, typename W = Unweighted>
class Graph {
protected:
    

public:
    class Vertex;
    class Edge;

    using VertexListType = forward_list_with_subscript<Vertex>;
    using EdgeListType = forward_list_with_subscript<Edge>;

    using VertexIterator = typename VertexListType::iterator;
    using EdgeIterator = typename EdgeListType::iterator;

    using VertexConstIterator = typename VertexListType::const_iterator;
    using EdgeConstIterator = typename EdgeListType::const_iterator;

protected:
    using MemoryPool = std::pmr::unsynchronized_pool_resource;

public:
    /// @brief Graph vertex.
    class Vertex {
        friend class Graph;

    protected:
        Vertex(const T& value, MemoryPool& memoryPool) :
            fValue{value},
            fNeighbor{&memoryPool},
            fSelf{} {}

        Vertex(T&& value, MemoryPool& memoryPool) :
            fValue{std::move(value)},
            fNeighbor{&memoryPool},
            fSelf{} {}

    public:
        Vertex(Vertex&&) = default;
        auto operator=(Vertex&&) -> Vertex& = default;

        ~Vertex() {
            // TODO
        }

        // operator*

        /// @brief Access the value on this vertex.
        /// @return the const reference to the value.
        auto operator*() const -> const T& {
            return fValue;
        }

        /// @brief Access the value on this vertex.
        /// @return the reference to the value.
        auto operator*() -> T& {
            return fValue;
        }

        // operator->

        /// @brief Member access to the value on this vertex.
        /// @return the const pointer to the value.
        auto operator->() const -> const T* {
            return &fValue;
        }

        /// @brief Member access to the value on this vertex.
        /// @return the pointer to the value.
        auto operator->() -> T* {
            return &fValue;
        }

        auto Neighbor() const -> const auto& {
            return fNeighbor;
        }

        auto Adjacent(const Vertex& vertex) const -> std::optional<EdgeIterator> {
            const auto it{fNeighbor.find(vertex)};
            if (it == fNeighbor.cend()) { return {}; }
            return it->second;
        }

    private:
        struct NeighborHash {
            auto operator()(VertexIterator it) const -> std::size_t {
                return reinterpret_cast<std::uintptr_t>(&*it);
            }
        };

    private:
        T fValue;
        std::pmr::unordered_map<VertexIterator, const EdgeIterator, NeighborHash> fNeighbor;

        typename VertexIteratorList::const_iterator fSelf;
    };

    /// @brief Graph edge
    class Edge {
        friend class Graph;

    protected:
        Edge(Vertex& vertex1, Vertex& vertex2, const W& weight) :
            fVertex1{vertex1},
            fVertex2{vertex2},
            fWeight{weight} {}

        Edge(Vertex& vertex1, Vertex& vertex2, W&& weight) :
            fVertex1{vertex1},
            fVertex2{vertex2},
            fWeight{std::move(weight)} {}

    public:
        Edge(Edge&&) = default;
        auto operator=(Edge&&) -> Edge& = default;

        ~Edge() {
            // TODO
        }

        auto Vertex1() const -> const Vertex& { return fVertex1; }
        auto Vertex2() const -> const Vertex& { return fVertex2; }
        auto Weight() const -> const W& { return fWeight; }

        auto Vertex1() -> Vertex& { return fVertex1; }
        auto Vertex2() -> Vertex& { return fVertex2; }
        auto Weight() -> W& { return fWeight; }

    private:
        Vertex& fVertex1;
        Vertex& fVertex2;
        W fWeight;

        typename EdgeIteratorList::const_iterator fSelf;
    };

public:
    Graph() :
        fMemoryPool{},
        fVertex{VertexListType{&fMemoryPool},
                VertexIteratorList{&fMemoryPool}},
        fEdge{EdgeListType{&fMemoryPool},
              EdgeIteratorList{&fMemoryPool}} {}

    /// @brief Add a vertex to this graph.
    /// @param value value on the vertex to be added.
    /// @return An iterator to the vertex added.
    auto AddVertex(const T& value) -> VertexIterator {
        return AddVertexImpl({value, fMemoryPool});
    }

    /// @brief Add a vertex to this graph.
    /// @param value value on the vertex to be added.
    /// @return An iterator to the vertex added.
    auto AddVertex(T&& value) -> VertexIterator {
        return AddVertexImpl({std::move(value), fMemoryPool});
    }

    /// @brief Add an edge to this graph
    /// @param vertex1 an vertex on edge
    /// @param vertex2 another vertex on edge
    /// @param weight edge weight
    /// @return An iterator to the edge added.
    auto AddEdge(Vertex& vertex1, Vertex& vertex2, const W& weight) -> EdgeIterator {
        return AddEdgeImpl(vertex1, vertex2, weight);
    }

    /// @brief Add an edge to this graph
    /// @param vertex1 an vertex on edge
    /// @param vertex2 another vertex on edge
    /// @param weight edge weight
    /// @return An iterator to the edge added.
    auto AddEdge(Vertex& vertex1, Vertex& vertex2, W&& weight = {}) -> EdgeIterator {
        return AddEdgeImpl(vertex1, vertex2, std::move(weight));
    }

    /// @brief Add an edge to this graph
    /// @param vertex1 an vertex (iterator) on edge
    /// @param vertex2 another vertex (iterator) on edge
    /// @param weight edge weight
    /// @return An iterator to the edge added.
    auto AddEdge(VertexIterator vertex1, VertexIterator vertex2, const W& weight) -> EdgeIterator {
        return AddEdge(*vertex1, *vertex2, weight);
    }

    /// @brief Add an edge to this graph
    /// @param vertex1 an vertex (iterator) on edge
    /// @param vertex2 another vertex (iterator) on edge
    /// @param weight edge weight
    /// @return An iterator to the edge added.
    auto AddEdge(VertexIterator vertex1, VertexIterator vertex2, W&& weight = {}) -> EdgeIterator {
        return AddEdge(*vertex1, *vertex2, std::move(weight));
    }

    auto VertexList() const -> const auto& { return fVertex.list; }
    auto EdgeList() const -> const auto& { return fEdge.list; }

protected:
    auto AddVertexImpl(Vertex&& vertex) -> VertexIterator {
        auto& vertexAdded{fVertex.list.emplace_front(std::move(vertex))};
        fVertex.vector.emplace_back(fVertex.list.begin());
        vertexAdded.fSelf = std::prev(fVertex.vector.cend());
        return vertexAdded.fSelf;
    }

    template<typename WW>
    auto AddEdgeImpl(Vertex& vertex1, Vertex& vertex2, WW&& weight) -> EdgeIterator {
        static_assert(std::is_constructible_v<W, WW&&>);
        // TODO
    }

protected:
    MemoryPool fMemoryPool;

    VertexListType fVertexList;
    EdgeListType fEdgeList;
};

} // namespace Smooth
